---
import type { ImageOutputFormat } from 'astro';
import { getImage } from 'astro:assets';

type Props = {
  src: ImageMetadata;
  alt: string;
  format?: ImageOutputFormat;
  sizes: number[];
};

type GenerateResponsiveImageProps = {
  src: ImageMetadata;
  format?: ImageOutputFormat;
  sizes: number[];
};

const generateResponsiveImage = async ({
  src,
  format = 'avif',
  sizes,
}: GenerateResponsiveImageProps) => {
  const imgSrcSet = sizes.map(async (size) => {
    const image = await getImage({ src, width: size, format });
    return `${image.src} ${size}w`;
  });

  const imgSrc = await getImage({ src, width: Math.max(...sizes), format });

  return {
    srcSet: await Promise.all(imgSrcSet),
    imgSrc: imgSrc.src,
  };
};

const { src, sizes, format = 'avif', alt } = Astro.props;
const { srcSet, imgSrc } = await generateResponsiveImage({
  src,
  sizes,
  format,
});
---

<img
  src={imgSrc}
  alt={alt}
  srcset={srcSet.join(', ')}
  width={src.width}
  height={src.height}
  loading="lazy"
  decoding="async"
/>

