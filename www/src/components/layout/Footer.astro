---
import GitHub from '../icons/GitHub.astro';
import Mastodon from '../icons/Mastodon.astro';
import RSS from '../icons/RSS.astro';
import Twitter from '../icons/Twitter.astro';

const currentDate = new Date();
const dateFormatter = Intl.DateTimeFormat('en-CA', {
  year: 'numeric',
  month: '2-digit',
  day: '2-digit',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit',
  hour12: true,
  timeZone: 'America/Vancouver',
});
---

<footer>
  <nav class="links">
    <ul>
      <li>
        <a
          rel="me"
          href="https://indieweb.social/@mykalmachon"
          title="Mastodon"
        >
          <Mastodon fill="var(--acc-1)" />
        </a>
      </li>
      <li>
        <a rel="me" href="https://github.com/MykalMachon" title="GitHub">
          <GitHub fill="var(--acc-1)" />
        </a>
      </li>
      <li>
        <a rel="me" href="https://twitter.com/MykalMachon" title="Twitter">
          <Twitter fill="var(--acc-1)" />
        </a>
      </li>
      <li>
        <a rel="me" href="/feeds" title="RSS">
          <RSS fill="var(--acc-1)" />
        </a>
      </li>
    </ul>
  </nav>
  <small
    >statically built and deployed <time
      datetime={dateFormatter.format(currentDate)}
      > {dateFormatter.format(currentDate)}</time
    >
  </small>
</footer>

<!-- Theme picker code -->
<script type="text/javascript">
  const bodyEl = document.querySelector('body');
  const themeBtnEls = document.querySelectorAll('button.btn-theme[data-theme]');

  let selectedTheme = localStorage.getItem('theme');

  try {
    const handleThemeBtnClick = (btnEl) => {
      // get theme and set it
      const theme = btnEl.dataset.theme;
      selectedTheme = theme;
      bodyEl.dataset.theme = theme;
      localStorage.setItem('theme', theme);

      // update all buttons
      themeBtnEls.forEach((btnEl) => btnEl.setAttribute('aria-pressed', false));

      // update current button
      btnEl.setAttribute('aria-pressed', 'true');
    };

    if (selectedTheme == null) {
      if (
        window.matchMedia &&
        window.matchMedia('(prefers-color-scheme: dark)').matches
      ) {
        localStorage.setItem('theme', 'dark');
        selectedTheme = 'dark';
      } else {
        localStorage.setItem('theme', 'light');
        selectedTheme = 'light';
      }
    }

    // set the selected theme based on selectedTheme
    const themeBtn = document.querySelector(
      `button.btn-theme[data-theme=${selectedTheme}]`
    );
    handleThemeBtnClick(themeBtn);

    themeBtnEls.forEach((btnEl) => {
      btnEl.addEventListener('click', (e) => {
        e.preventDefault();
        handleThemeBtnClick(btnEl);
      });
    });
  } catch (err) {
    bodyEl.dataset.theme = 'dark';
  }
</script>

<style lang="scss">
  footer {
    border-top: 1px solid var(--paper-3);
    background: var(--paper-2);
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: var(--size-3) var(--size-3);

    nav.links {
      display: flex;
      align-items: center;
      ul {
        list-style: none;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        margin: 0;
        padding: 0;
        gap: var(--size-6);
      }
      li {
        display: grid;
        place-items: center;
      }
      a {
        display: grid;
        place-items: center;
      }
    }
    small {
      display: flex;
      align-items: center;
      gap: var(--size-1);
    }
  }
</style>
