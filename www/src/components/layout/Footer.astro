---
const currentDate = new Date();
const dateFormatter = Intl.DateTimeFormat('en-GB', {
  year: 'numeric',
  month: '2-digit',
  day: '2-digit',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit',
  hour12: false,
  timeZone: 'America/Vancouver',
});
const dateFormatted = dateFormatter.format(currentDate);
const dateDay = dateFormatted.split(',')[0];
const dateTime = dateFormatted.split(',')[1].trim();
---

<footer class="container">

  <section class="footnote divider--top">
    <p>
      Hosted on <a href="https://netlify.com"> Netlify</a>, generated by <a
        href="https://astro.build">Astro</a
      >, developed with 💖 by Mykal 💾
    </p>
    <small
      >this site was statically generated on <code>{dateDay}</code> at <code
        >{dateTime}
      </code>
    </small>
  </section>
  <section class="divider--top">
    <p>Choose a theme:</p>
    <div class="theme-picker__btns">
      <button class="btn-theme small" aria-pressed="false" data-theme="light"
        >light</button
      >
      <button class="btn-theme small" aria-pressed="false" data-theme="dark"
        >dark</button
      >

    </div>
    <small>mind the mess; designing in public 🧹😁</small>
  </section>
</footer>

<!-- Theme picker code -->
<script type="text/javascript">
  const bodyEl = document.querySelector('body');
  const themeBtnEls = document.querySelectorAll('button.btn-theme[data-theme]');

  let selectedTheme = localStorage.getItem('theme');

  const handleThemeBtnClick = (btnEl) => {
    // get theme and set it
    const theme = btnEl.dataset.theme;
    selectedTheme = theme;
    bodyEl.dataset.theme = theme;
    localStorage.setItem('theme', theme);

    // update all buttons
    themeBtnEls.forEach((btnEl) => btnEl.setAttribute('aria-pressed', false));

    // update current button
    btnEl.setAttribute('aria-pressed', 'true');
  };

  if (selectedTheme == null) {
    if (
      window.matchMedia &&
      window.matchMedia('(prefers-color-scheme: dark)').matches
    ) {
      localStorage.setItem('theme', 'dark');
      selectedTheme = 'dark';
    } else {
      localStorage.setItem('theme', 'light');
      selectedTheme = 'light';
    }
  }

  // set the selected theme based on selectedTheme
  const themeBtn = document.querySelector(
    `button.btn-theme[data-theme=${selectedTheme}]`
  );
  handleThemeBtnClick(themeBtn);

  themeBtnEls.forEach((btnEl) => {
    btnEl.addEventListener('click', (e) => {
      e.preventDefault();
      handleThemeBtnClick(btnEl);
    });
  });
</script>

<style lang="scss">
  svg {
    width: 24px;
    height: 24px;
  }

  code {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--size-2);
    background: var(--paper-2);
    border-radius: var(--radius-1);
    padding: 0 var(--size-2);
  }

  small {
    color: var(--ink-3);
  }

  footer {
    margin: var(--size-3) 0 var(--size-5) 0;
  }

  button[aria-pressed="true"] {
    background: var(--acc-1);
    color: var(--ink-3);
  }

  .theme-picker__btns {
    margin: var(--size-3) 0;
  }
</style>
